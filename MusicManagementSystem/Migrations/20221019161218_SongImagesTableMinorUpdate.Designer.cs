// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MusicManagementSystem.Data;

#nullable disable

namespace MusicManagementSystem.Migrations
{
    [DbContext(typeof(MusicManagemetSystemDbContext))]
    [Migration("20221019161218_SongImagesTableMinorUpdate")]
    partial class SongImagesTableMinorUpdate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("MusicManagementSystem.Models.Artists", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(56)
                        .HasColumnType("nvarchar(56)");

                    b.Property<string>("SpotifyLink")
                        .HasMaxLength(777)
                        .HasColumnType("nvarchar(777)");

                    b.HasKey("Id");

                    b.ToTable("Artists");
                });

            modelBuilder.Entity("MusicManagementSystem.Models.Genres", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(56)
                        .HasColumnType("nvarchar(56)");

                    b.HasKey("Id");

                    b.ToTable("Genres");
                });

            modelBuilder.Entity("MusicManagementSystem.Models.ImagesPaths", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasMaxLength(777)
                        .HasColumnType("nvarchar(777)");

                    b.HasKey("Id");

                    b.ToTable("ImagesPaths");
                });

            modelBuilder.Entity("MusicManagementSystem.Models.Songs", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("AlbumName")
                        .HasMaxLength(56)
                        .HasColumnType("nvarchar(56)");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int?>("Length")
                        .HasColumnType("int");

                    b.Property<string>("Lyrics")
                        .HasMaxLength(6666)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasMaxLength(56)
                        .HasColumnType("nvarchar(56)");

                    b.HasKey("Id");

                    b.ToTable("Songs");
                });

            modelBuilder.Entity("MusicManagementSystem.Models.SongsArtists", b =>
                {
                    b.Property<int>("SongId")
                        .HasColumnType("int");

                    b.Property<int>("ArtistId")
                        .HasColumnType("int");

                    b.HasKey("SongId", "ArtistId");

                    b.HasIndex("ArtistId");

                    b.ToTable("SongsArtists");
                });

            modelBuilder.Entity("MusicManagementSystem.Models.SongsGenres", b =>
                {
                    b.Property<int>("SongId")
                        .HasColumnType("int");

                    b.Property<int>("GenreId")
                        .HasColumnType("int");

                    b.HasKey("SongId", "GenreId");

                    b.HasIndex("GenreId");

                    b.ToTable("SongsGenres");
                });

            modelBuilder.Entity("MusicManagementSystem.Models.SongsImagesPaths", b =>
                {
                    b.Property<int>("SongId")
                        .HasColumnType("int");

                    b.Property<int>("ImagePathId")
                        .HasColumnType("int");

                    b.HasKey("SongId", "ImagePathId");

                    b.HasIndex("ImagePathId");

                    b.ToTable("SongsImagesPaths");
                });

            modelBuilder.Entity("MusicManagementSystem.Models.SongsArtists", b =>
                {
                    b.HasOne("MusicManagementSystem.Models.Artists", "Artist")
                        .WithMany("SongsAuthorsPairs")
                        .HasForeignKey("ArtistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MusicManagementSystem.Models.Songs", "Song")
                        .WithMany("SongsArtistsPairs")
                        .HasForeignKey("SongId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Artist");

                    b.Navigation("Song");
                });

            modelBuilder.Entity("MusicManagementSystem.Models.SongsGenres", b =>
                {
                    b.HasOne("MusicManagementSystem.Models.Genres", "Genre")
                        .WithMany()
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MusicManagementSystem.Models.Songs", "Song")
                        .WithMany("SongsGenresPairs")
                        .HasForeignKey("SongId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Genre");

                    b.Navigation("Song");
                });

            modelBuilder.Entity("MusicManagementSystem.Models.SongsImagesPaths", b =>
                {
                    b.HasOne("MusicManagementSystem.Models.ImagesPaths", "ImagePath")
                        .WithMany()
                        .HasForeignKey("ImagePathId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MusicManagementSystem.Models.Songs", "Song")
                        .WithMany("SongsImagesPathsPairs")
                        .HasForeignKey("SongId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ImagePath");

                    b.Navigation("Song");
                });

            modelBuilder.Entity("MusicManagementSystem.Models.Artists", b =>
                {
                    b.Navigation("SongsAuthorsPairs");
                });

            modelBuilder.Entity("MusicManagementSystem.Models.Songs", b =>
                {
                    b.Navigation("SongsArtistsPairs");

                    b.Navigation("SongsGenresPairs");

                    b.Navigation("SongsImagesPathsPairs");
                });
#pragma warning restore 612, 618
        }
    }
}
